name: CI

on: [ push ]

jobs:
  lint:
    name: Lint codebase
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - run: dotnet tool install -g dotnet-format
      - run: dotnet-format --exclude ThirdPartyAssets -f Assets --check -v d

  buildAndTestForSomePlatforms:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        unityVersion:
          - 2021.3.1f1
        targetPlatform:
          # - StandaloneOSX # Build a macOS standalone (Intel 64-bit).
          # - StandaloneWindows # Build a Windows 32-bit standalone.
          - StandaloneWindows64 # Build a Windows 64-bit standalone.
          # - StandaloneLinux64 # Build a Linux 64-bit standalone.
          # - iOS # Build an iOS player.
          # - Android # Build an Android player.
          # - WebGL # WebGL.
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          lfs: true

      # Cache Library/ folder, should speed up build times by about 50%
      - uses: actions/cache@v2
        with:
          path: Library
          key: Library-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.targetPlatform }}-
            Library-

      # Run Play Mode and Edit Mode tests
      - uses: game-ci/unity-test-runner@v2
        id: testRunner
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          unityVersion: ${{ matrix.unityVersion }}
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      # Upload Test Results
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results (all modes)
          path: ${{ steps.testRunner.outputs.artifactsPath }}

      # Build the actual game
      - uses: game-ci/unity-builder@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          buildName: ${{ github.event.repository.name }}
          versioning: None
          # To fix the Warning: Could not parse "none" to semver, defaulting android version code to 1 warning
          androidVersionCode: 1
          unityVersion: ${{ matrix.unityVersion }}
          targetPlatform: ${{ matrix.targetPlatform }}

      # Compute the short-sha since only the long sha is available in the github context
      # See https://stackoverflow.com/a/59819441
      - name: Get Short Sha
        if: startsWith(github.ref, 'refs/tags/v')
        id: vars
        run: echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      # Upload the generated build
      - uses: actions/upload-artifact@v2
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          SHORT_SHA: $(git rev-parse --short ${{ github.sha }})
        with:
          name: ${{github.event.repository.name}} ${{github.event.release.tag_name}}(${{matrix.targetPlatform}} ${{ steps.vars.outputs.sha_short }})
          path: build/${{ matrix.targetPlatform }}

  # Adapted from https://github.com/adrenak/upm-template/blob/master/.github/workflows/ci.yml
  # https://github.com/marketplace/actions/action-for-semantic-release
  release:
    if: "github.ref == 'refs/heads/main'"
    name: Release
    needs:
      - lint
      - buildAndTestForSomePlatforms
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v2.5.4
        with:
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}